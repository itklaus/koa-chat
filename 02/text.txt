Node.js выполняется в один поток, а уже в нем может быть несколько потоков. Stream3

Readable, Writable, Duplex, Transform
Наследован он EvenetEmmitor // object, .on, .emit, .buffer = []
Освобождаем данные:
pause / flowing
stream.pipe считывает данные, с паузы может снимать

.on('data', chunk => {})

stream.resume() / stream.pause() - когда руками нужно управлять потоком

.on(readable, () => {
  const chunk = stream.read();
})

Разные события в разных потоках имеют разные приименения
Нужно закрывать оборванные соеденения

req.on('end'); // конец
req.on('close'); // закрыли поток

const file = new fs.ReadStream(filepath); file.on('error)

unit, intergration, e2e
запускать сервер до запуска тестов
done передаем для сихнр
before () // запсукаем
after()   // закрыть соеденения - вызываем в конце заверш теста

request для создание сервера для теста

